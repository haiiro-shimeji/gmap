<?php

define('GMAP_STATIC_PATH_NOTLISTED', 0);
define('GMAP_STATIC_PATH_LISTED', 1);
define('GMAP_STATIC_PATH_PHP', 2);

/**
 * Implementation of hook_menu().
 */
function gmap_static_menu() {
  
  $items['admin/config/services/gmap_static'] = array(
    'title' => 'GMap Static',
    'description' => 'Configure GMap Static settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gmap_static_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
  
}
 
/**
 * Implementation of hook_element_info_alter().
 */
function gmap_static_element_info_alter( &$info ) {
  
  $info['gmap']['#pre_render'][] = '_gmap_static_pre_render';
  
}
 
/**
 * Implementation of hook_theme().
 */
function gmap_static_theme() {
  return array(
    'gmap_static' => array('render element' => 'element'),
  );
}

/**
 * Gmap static element theme hook
 */
function theme_gmap_static($variables) {
	
  $element = $variables['element'];
  
  $settings = $element['#gmap_settings'];
  
  $markerStrings = array();
  if ( is_array( $settings['markers'] ) ) {
    foreach ( $settings['markers'] as $marker ) {
      $markerStrings[] = 'color:red|'.$marker['latitude'].','. $marker['longitude'];
    }
  }
  
  return '<div class="gmap-static-image" style="width: '.$settings['width'].'; height: '.$settings['height'].';'
          . 'background-image: url(' 
          . 'http://maps.google.com/maps/api/staticmap?center=' . $settings['latitude'] . ',' . $settings['longitude']
          . '&zoom='.$settings['zoom']
          . '&size='.preg_replace( '/px$/', '', $settings['width'] ).'x'.preg_replace( '/px$/', '', $settings['height'] )
          . '&maptype=roadmap'
          . ( 0 < count( $markerStrings ) ? '&markers='.implode( '|', $markerStrings ) : '' )
          . '&sensor=false'          . ');'
          . 'background-position: center center;'
          . 'background-repeat: no-repeat;'
          . '">'
          . '</div>';

}

/**
 * switch the static or functional map according to the defined condition. 
 */
function _gmap_static_pre_render( $element ) {
  
  $pages = variable_get('gmap_static_rules', '');
  $visibility = variable_get('gmap_static_visibility', GMAP_STATIC_PATH_NOTLISTED);
  
  // Match path if necessary.
  if ($pages) {
    if ($visibility < GMAP_STATIC_PATH_PHP) {
      // Convert path to lowercase. This allows comparison of the same path
      // with different case. Ex: /Page, /page, /PAGE.
      $pages = drupal_strtolower($pages);
      // Convert the Drupal path to lowercase
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      // Compare the lowercase internal and lowercase path alias (if any).
      $page_match = drupal_match_path($path, $pages);
      if ($path != $_GET['q']) {
        $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
      }
      // When $block->visibility has a value of 0 (GMAP_STATIC_PATH_NOTLISTED),
      // the block is displayed on all pages except those listed in $block->pages.
      // When set to 1 (GMAP_STATIC_PATH_LISTED), it is displayed only on those
      // pages listed in $block->pages.
      $page_match = !($visibility xor $page_match);
    }
    elseif (module_exists('php')) {
      $page_match = php_eval($pages);
    }
    else {
      $page_match = FALSE;
    }
  }
  else {
    $page_match = TRUE;
  }
  
  if ( $page_match ) $element['#theme'] = 'gmap_static';
  
  return $element;
  
}

function gmap_static_admin_settings($form) {
  
  $options = array(
    GMAP_STATIC_PATH_NOTLISTED => t('All pages except those listed'),
    GMAP_STATIC_PATH_LISTED => t('Only the listed pages'),
  );
  $description = t("Specify pages by using their paths. Enter one path per line. The '*' character is a wildcard. Example paths are %blog for the blog page and %blog-wildcard for every personal blog. %front is the front page.", array('%blog' => 'blog', '%blog-wildcard' => 'blog/*', '%front' => '<front>'));

  if (module_exists('php') && user_access('use PHP for settings') ) {
    $options += array(GMAP_STATIC_PATH_PHP => t('Pages on which this PHP code returns <code>TRUE</code> (experts only)'));
    $title = t('Pages or PHP code');
    $description .= ' ' . t('If the PHP option is chosen, enter PHP code between %php. Note that executing incorrect PHP code can break your Drupal site.', array('%php' => '<?php ?>'));
  }
  else {
    $title = t('Pages');
    $description .= ' ' . t('If the PHP module is enabled, you can define PHP code which decide to display the static map or the functional map.');
  }
  $form['gmap_static_visibility'] = array(
    '#type' => 'radios',
    '#title' => t('Show static google map on specific pages'),
    '#options' => $options,
    '#default_value' => variable_get('gmap_static_visibility', GMAP_STATIC_PATH_NOTLISTED),
  );
  $form['gmap_static_rules'] = array(
    '#type' => 'textarea',
    '#title' => '<span class="element-invisible">' . $title . '</span>',
    '#default_value' => variable_get('gmap_static_rules', ''),
    '#description' => $description,
  );
  
  return system_settings_form($form);
    
}
